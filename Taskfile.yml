version: '3'
silent: true

vars:
  CLOUD_PROVIDER:
    sh: jsonnet -e 'std.get(std.mergePatch(import "config/default.jsonnet", import "config/local.jsonnet"), "cloud_provider")' | tr -d '"'

tasks:
  default:
    desc: "Show help"
    cmds:
      - task --list

  tfswitch:
    desc: "Ensuring the correct OpenTofu version is used"
    cmds:
      - tfswitch --product opentofu

  generate-config:
    desc: "Generating Terraform configuration from JSONnet files"
    cmds:
      - jsonnet -e 'std.mergePatch(import "config/default.jsonnet", import "config/local.jsonnet")' > deploy/terraform.tfvars.json
      - |
        if [ "{{.CLOUD_PROVIDER}}" = "digitalocean" ]; then
          jsonnet -e '{ do_token: std.mergePatch(import "config/default.jsonnet", import "config/local.jsonnet").do_token }' > provision/digitalocean/terraform.tfvars.json
        else
          echo "{}" > provision/{{.CLOUD_PROVIDER}}/terraform.tfvars.json
        fi

  bootstrap:
    desc: "Set up a temporary kubernetes cluster, including infrastructure and common services"
    deps: [generate-config, tfswitch]
    cmds:
      - task: provision
      - task: deploy

  provision:
    desc: "Provisioning ephemeral Kubernetes cluster"
    cmds:
      - echo "Provisioning ephemeral Kubernetes cluster..."
      - echo "Using {{.CLOUD_PROVIDER}} as cloud provider"
      - task -d provision/{{.CLOUD_PROVIDER}} provision

  deploy:
    desc: "Deploying common services to ephemeral Kubernetes cluster"
    cmds:
      - task -d deploy deploy

  destroy:
    desc: "Destroy ephemeral kubernetes cluster"
    cmds:
      - echo "Purging cluster content..."
      - if [ "{{.CLOUD_PROVIDER}}" != "kind" ]; then task -d deploy destroy; fi
      - echo "Destroying ephemeral Kubernetes cluster..."
      - echo "Using {{.CLOUD_PROVIDER}} as cloud provider"
      - task -d provision/{{.CLOUD_PROVIDER}} destroy
      - task: cleanup

  cleanup:
    desc: "Cleanup local environment"
    cmds:
      - echo "Cleaning up local environment..."
      - rm -f /tmp/disposable-argo-token
      - find . -type f -name "terraform.tfvars.json" -exec rm {} +
      - find . -type f -name "terraform.tfstate*" -exec rm {} +
      - find . -type f -name ".terraform.lock.hcl" -exec rm {} +
      - find . -type d -name ".terraform" -exec rm -rf {} +

  stop:
    desc: "Stop kind cluster"
    cmds:
      - echo "Stopping kind cluster..."
      - docker stop disposable-cluster-control-plane
      - docker stop disposable-cluster-worker

  start:
    desc: "Start kind cluster"
    cmds:
      - echo "Starting kind cluster..."
      - docker start disposable-cluster-control-plane
      - docker start disposable-cluster-worker
